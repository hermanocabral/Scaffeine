<#@ Template Language="C#" HostSpecific="True" Inherits="DynamicTransform" #>
<#@ Output Extension="cs" #>
namespace <#= Model.Namespace #>.Service
{
    using Core.Model;
    using Core.Configuration;
    using System;
	using System.Collections.Generic;

    public partial class FriendshipService
    {
        public CreateFriendshipStatus CreateFriendship(int userId, int friendId, bool oneWay)
        {
            if (oneWay && !FriendshipSettings.Instance.AllowOneWayFriendships)
                throw new InvalidOperationException("AllowOneWayFriendships not allowed");

            var status = FriendshipSettings.Instance.RequireApproval
                             ? InvitationStatus.Pending
                             : InvitationStatus.Approved;
            var primaryFriendship = new Friendship
            {
                UserId = userId,
                FriendId = friendId,
                InvitationStatus = status,
                IniciatedByUser = true
            };

            Repository.SaveOrUpdate(primaryFriendship);

            if (!oneWay)
            {
                status = FriendshipSettings.Instance.RequireApproval
                             ? InvitationStatus.AwaitingApproval
                             : InvitationStatus.Approved;
                var secondaryFriendship = new Friendship
                {
                    UserId = userId,
                    FriendId = friendId,
                    InvitationStatus = status,
                    IniciatedByUser = false
                };
                
                Repository.SaveOrUpdate(secondaryFriendship);
            }

            UnitOfWork.Commit();
            return CreateFriendshipStatus.FriendshipCreated;
        }

        public IEnumerable<Friendship> GetPendingRequests(int userId)
        {
            return Find(f => f.FriendId == userId && f.InvitationStatus == InvitationStatus.Pending);
        }

        public IEnumerable<Friendship> GetFriends(int userId)
        {
            return Find(f => f.UserId == userId && f.InvitationStatus == InvitationStatus.Approved);
        }
    }
}