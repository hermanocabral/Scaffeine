<!--
Copyright (c) <#= DateTime.Now.Year #> 
Ulf Björklund
http://average-uffe.blogspot.com/
http://twitter.com/codeplanner
http://twitter.com/ulfbjo

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//-->
<#@ Template Language="C#" HostSpecific="True" Inherits="DynamicTransform" #>
<#@ Output Extension="cshtml" #>
<#@ assembly name="System.ComponentModel.DataAnnotations" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="System.Data.Linq" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.ComponentModel.DataAnnotations" #>
<#@ import namespace="System.Data.Linq.Mapping" #>
<#@ import namespace="System.Data.Objects.DataClasses" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="EnvDTE" #>
<# var DataType = (EnvDTE.CodeType) Model.DataType; #>
@{
    ViewBag.Title = "SinglePage";
	Layout = "~/Views/Shared/_Folder.cshtml";
}
@if (false)
{ 
    <script src="/Scripts/knockout-2.0.0.js" type="text/javascript"></script>           
}
@section Scripts{
    <script type="text/javascript">
		var currentPage = 1,
            pageSize = 10;
			
        //Entity, Scaffolded!!!
        var <#= DataType.Name #>Entity = function () {
            this.Id = 0;
            this.Created = null;
			<#
			//Own properties
			foreach (ModelProperty property in GetModelProperties(DataType, false)) {
    		if (!property.IsPrimaryKey && !property.IsReadOnly && property.Name != "Created") {
			#>
			this.<#= property.Name #> = ko.observable();
			<#
    		}
			}
			#>
			<#
			//parents
			foreach (RelatedEntityInfo relation in ParentRelations) {
			#>
			this.<#= relation.RelationName #> = ko.observable();			
			<#
			}
			#>
			<#
			//children 
			foreach (RelatedEntityInfo relation in ChildRelations) {
			#>
			this.<#= relation.RelationName #> = ko.observableArray([]);			
			<#
			}
			#>
        };

        $(function () {
            //Setup viewmodel and trigger knockoutjs
            ViewModel.Debug = debugEnabled;
            ViewModel.Setup("<#= DataType.Name #>", <#= DataType.Name #>Entity, pageSize, function (pageinfo) {
				setupPaging(pageinfo);
                var cmd = getQuerystring("cmd", null);
                var id = getQuerystring("id", null);
                var sender = getQuerystring("sender", null);
                if (cmd == 'add') {
                    ViewLogic.ShowAddDialog(id,sender);
                }
                if (cmd == 'details') {
                    if (id != null) {
                        ViewModel.Activate(id);
                        ViewLogic.ShowDetails();
                    }
                }
                if (cmd == 'delete') {
                    if (id != null) {
                        ViewModel.Activate(id);
                        ViewLogic.ShowDeleteDialog();
                    }
                }
                if (cmd == 'edit') {
                    if (id != null) {
                        ViewModel.Activate(id);
                        ViewLogic.ShowEditDialog();
                    }
                }
				if (cmd == "index" || cmd == "") {
                    ViewLogic.ShowIndex();
                }
            });            
        });

       var ViewLogic = {
            ShowAddDialog: function (id, sender) {
                $("#details").hide();
                LoadParentAddData(id, sender, function () { $('#dialog-modal-add').modal('show'); });
            },
            ShowEditDialog: function () {
                $("#details").hide();
                LoadParentEditData(function () { $('#dialog-modal-edit').modal('show'); });
            },
            HideAddDialog: function () {
                $('#dialog-modal-add').modal('hide');
            },
            HideEditDialog: function () {
                $('#dialog-modal-edit').modal('hide');
            },
            ShowDeleteDialog: function () {
                $("#details").hide();
                $('#dialog-modal-delete').modal('show');
            },
            HideDeleteDialog: function () {
                $('#dialog-modal-delete').modal('hide');
            },
            ShowDetails: function () {
                $("#index").hide();
                $("#details").show();
            },
            ShowIndex: function () {
                $("#details").hide();
                $("#index").show();
            },
            SaveDialogCommit: function (formElement) {
                ViewModel.Add($(formElement).serialize(), function (result) {
                    ViewLogic.HideAddDialog();
                    for (p in result) {
                        $("#" + p, "#dialog-modal-add").parent().removeClass('error');
                        $("#" + p, "#dialog-modal-add").val('');
                        $("#" + p, "#dialog-modal-add").popover('disable');
                    }
                    triggerChangePage(currentPage);
                }, function (result) {
                    for (p in result.ValidationErrors) {
                        $("#" + p, "#dialog-modal-add").parent().addClass('error');
                        $("#" + p, "#dialog-modal-add").data('title', 'Validation Error');
                        $("#" + p, "#dialog-modal-add").data('content', result.ValidationErrors[p].join(','));
                        $("#" + p, "#dialog-modal-add").popover();
                    }
                });
            },
            UpdateDialogCommit: function (formElement) {
                ViewModel.Update($(formElement).serialize(), function (result) {
                    ViewLogic.HideEditDialog();
                    for (p in result) {
                        $("#" + p, "#dialog-modal-edit").parent().removeClass('error');
                        $("#" + p, "#dialog-modal-edit").val('');
                        $("#" + p, "#dialog-modal-edit").popover('disable');
                    }
                }, function (result) {
                    for (p in result.ValidationErrors) {
                        $("#" + p, "#dialog-modal-edit").parent().addClass('error');
                        $("#" + p, "#dialog-modal-edit").data('title', 'Validation Error');
                        $("#" + p, "#dialog-modal-edit").data('content', result.ValidationErrors[p].join(','));
                        $("#" + p, "#dialog-modal-edit").popover();
                    }
                });
            },
            DeleteDialogCommit: function () {
                ViewModel.Remove(ViewModel.Entity());
                ViewLogic.HideDeleteDialog();
                triggerChangePage(currentPage);
            },
            ChangePage: function (entityName, cmd, id, sender) {
                window.location.href = "/" + entityName + "/SinglePage?cmd=" + cmd + "&id=" + id + "&sender=" + sender;
            }
        };

		var LoadParentEditData = function(callback){					 
			<#
			//parents
			foreach (RelatedEntityInfo relation in ParentRelations) {
			#>
			$("#dialog-modal-add #<#= relation.RelationProperty.Name #>").empty();
            RelatedData.Load("<#= relation.RelationName #>", function (data) {
                $.when($.each(data, function (ix, value) {
                   var o = $("<option>").attr('value', value.Id).text(value.<#= relation.RelatedEntityType.DisplayColumnProperty().Name #>);
                   $("#dialog-modal-edit #<#= relation.RelationProperty.Name #>").append(o);
                })).done(function () {
                   $("#dialog-modal-edit #<#= relation.RelationProperty.Name #>").val(ViewModel.Entity().<#= relation.RelationProperty.Name #>());                        
                });
             });
			<#
			}
			#>
			
			<#
			//ManyToMany
			/*Not working right now....
			foreach (RelatedEntityInfo relation in ChildRelations) {					 
			if(IsManyToMany(relation.RelatedEntityType.Name)){
			#>
			RelatedData.Load("<#= relation.RelatedEntityType.Name #>", function (data) {
               	$.when($.each(data, function (ix, value) {
                 	var o = $("<option>").attr('value', value.Id).text(value.Name);
                  		$("#dialog-modal-edit #<#= relation.RelationProperty.Name #>").append(o);
                	})).done(function () {
                   	$("#dialog-modal-edit #<#= relation.RelationProperty.Name #>").val(ViewModel.Entity().<#= relation.RelationProperty.Name #>());                        
               	});
            });
			<#
			}
			}
			*/
			#>
			callback();
		};
		
		var LoadParentAddData = function(id, sender, callback){
			//for each parent, load data
				<#
				//parents
				foreach (RelatedEntityInfo relation in ParentRelations) {
				#>
					$("#dialog-modal-add #<#= relation.RelationProperty.Name #>").empty();
					RelatedData.Load("<#= relation.RelationName #>", function (data) {
                    $.when($.each(data, function (ix, value) {
                        var o = $("<option>").attr('value', value.Id).text(value.<#= relation.RelatedEntityType.DisplayColumnProperty().Name #>);
                        $("#dialog-modal-add #<#= relation.RelationProperty.Name #>").append(o);
                        //$("#dialog-modal-add #<#= relation.RelationName #>").val(value.Id);                        
                    })).done(function () {                        
                        if (id != null && sender == "<#= relation.RelationName #>") {
                        	$("#dialog-modal-add #<#= relation.RelationProperty.Name #>").val(id);
                    	}
                    });
                });				
				<#
				}
				#>   
				
				<#
				//ManyToMany
				/*Not working right now....
				foreach (RelatedEntityInfo relation in ChildRelations) {					 
				if(IsManyToMany(relation.RelatedEntityType.Name)){
				#>
					RelatedData.Load("<#= relation.RelatedEntityType.Name #>", function (data) {
                    $.when($.each(data, function (ix, value) {
                        var o = $("<option>").attr('value', value.Id).text(value.<#= relation.RelatedEntityType.DisplayColumnProperty().Name #>);
                        $("#dialog-modal-add #<#= relation.RelationProperty.Name #>").append(o);
                        $("#dialog-modal-add #<#= relation.RelationProperty.Name #>").val(value.Id);                        
                    })).done(function () {                        
                        if (id != null) {                           
                            $("#dialog-modal-add #<#= relation.RelationProperty.Name #>").val(id);
                        }
                        
                    });
                });
				<#
				}
				}*/
				#>
				callback();
		};
        var RelatedData = {
            Load: function (entityName, callback) {
                $.getJSON("/" + entityName + "/GetAll/", {}, function (data) {
                    callback(data);
                });
            }
        };
		
		//Paging start
        var triggerChangePage = function (page) {
            ViewModel.ChangePage(page, pageSize, function (data) {
                setupPaging(data);
            });
        }

        var setupPaging = function (data) {

            // Setup paging... And yes I know it´s quite ugly :)           
            currentPage = data.CurrentPage;
            if (data.PagesCount == 1) {
                $(".pagination").empty();
                return;
            }
            var pagerContainer = $("<ul>");
            var numberOfLinks = 5;
            var start = data.CurrentPage - numberOfLinks;
            if (start < 1)
                start = 1;
            var stop = start + (numberOfLinks * 2) + 1;
            if (stop > data.PagesCount)
                stop = data.PagesCount;

            //Create first and prev links...
            if (data.CurrentPage != 1) {
                var first = $("<a href='#' data-page='1'>").text('first').bind('click', function () { triggerChangePage($(this).data('page')); }); ;
                pagerContainer.append($("<li>").append(first));
                var prev = $("<a href='#' data-page='" + (data.CurrentPage - 1) + "'>").text('prev').bind('click', function () { triggerChangePage($(this).data('page')); }); ;
                pagerContainer.append($("<li>").append(prev));
            }

            //Create page links
            for (p = start; p <= stop; p++) {
                if (data.CurrentPage == p) {
                    var l = $("<a href='#'>").text(p);
                    pagerContainer.append($("<li class='disabled'>").append(l));
                }
                else {
                    var l = $("<a href='#' data-page='" + p + "'>").text(p).bind('click', function () { triggerChangePage($(this).data('page')); });
                    pagerContainer.append($("<li>").append(l));
                }
            }

            //Create next last links
            if (data.CurrentPage != data.PagesCount) {
                var next = $("<a href='#' data-page='" + (data.CurrentPage + 1) + "'>").text('next').bind('click', function () { triggerChangePage($(this).data('page')); });
                pagerContainer.append($("<li>").append(next));
                var last = $("<a href='#' data-page='" + data.PagesCount + "'>").text('last').bind('click', function () { triggerChangePage($(this).data('page')); });
                pagerContainer.append($("<li>").append(last));
            }

            //Add paging...
            $(".pagination").empty().append(pagerContainer);
            //End of paging
        }
        //Paging end
        
    </script>
}
<div id="index">
    <div>
        <ul class="nav nav-tabs">
            <li class="active"><a href="#tabs-1"><#= DataType.Name #></a></li>
        </ul>
        <div class="tab-content">
            <div class="tab-pane active" id="tabs-1">
                <a data-toggle="modal" href="#dialog-modal-add" class="btn btn-primary btn-medium" data-bind="click: function(){ LoadParentAddData(null,'',function(){});}">
                        Add <#= DataType.Name #></a>
            </div>
            <table class="table table-condensed">
                <thead>
                    <tr>
						<#
						//Own properties
						foreach (ModelProperty property in GetModelProperties(DataType, false)) {   
							if (!property.IsForeignKey && property.Name != "Created" && property.Name != "Updated") {
						#>
						<th>												
                            <#= property.Name #>
                        </th>						
						<#   
							}
						}
						#>
						<# 
						//parents
						foreach (RelatedEntityInfo relation in ParentRelations) {
						#>
						<th>
						<#= relation.RelationName #> 
						</th>
						<#
						}
						#>
						<#
						//children 
						foreach (RelatedEntityInfo relation in ChildRelations) {
						#>
						<th>
							<#= relation.RelationName #>
                        </th>
						<# 
						} 
						#>
						<#
						//Created/Updated
						foreach (ModelProperty property in GetModelProperties(DataType, false)) {   
							if (property.Name == "Created" || property.Name == "Updated") {
						#>
						<th>
                            <#= property.Name #>
                        </th>						
						<#   
							}
						}
						#>
                        <th>
                        </th>
                    </tr>
                </thead>
                <tbody data-bind="foreach: Entities">
                    <tr>
						<#
						//Own properties
						foreach (ModelProperty property in GetModelProperties(DataType, false)) {
							if (!property.IsForeignKey && property.Name != "Created" && property.Name != "Updated") {
						#>
						<td data-bind="text: <#= property.Name #>">
                        </td>											
						<#    					
							}
						}
						#>
						<# 
						//parents
						foreach (RelatedEntityInfo relation in ParentRelations) {
						#>
						<td>
                            <a href="#" data-bind="text: <#= relation.RelationName #>().<#= relation.RelatedEntityType.DisplayColumnProperty().Name #>, click: function(){ViewLogic.ChangePage('<#= relation.RelationName#>', 'details', $data.<#= relation.RelationName#>().Id,'<#= DataType.Name #>');}"></a>
                        </td>
						<#
						}
						#>	
						<#
						//children 
						foreach (RelatedEntityInfo relation in ChildRelations) {
						#>
						<td data-bind="text: <#= relation.RelationName #>().length + ' <#= relation.RelationName#>'">
                        </td>
						<# 
						} 
						#>
						<#
						//Created/Updated
						foreach (ModelProperty property in GetModelProperties(DataType, false)) {   
							if (property.Name == "Created" || property.Name == "Updated") {
						#>
						<td data-bind="text: <#= property.Name #>">
                        </td>                        					
						<#   
							}
						}
						#>
                        <td>
                            <ul class="nav nav-pills" style="margin-bottom: 0px;">
                                <li class="dropdown" style="margin: 0px;"><a style="margin-top: 0px; margin-bottom: 0px;
                                        padding-bottom: 0px; padding-top: 0px;" class="dropdown-toggle" data-toggle="dropdown"
                                        href="#">Action<b class="caret"></b></a>
                                    <ul class="dropdown-menu">
                                        <li><a data-toggle="modal" href="#dialog-modal-delete" data-bind="click: function(item){ $root.Select(item); }">
                                            Delete</a></li>
                                        <li><a data-toggle="modal" href="#dialog-modal-edit" data-bind="click: function(item){ $root.Select(item); LoadParentEditData(function(){}); }">
                                            Edit</a></li>
                                        <li><a href="#" data-bind="click: function(item){ $root.Select(item); ViewLogic.ShowDetails();}">
                                            Details</a></li>                           
                                    </ul>
                                </li>
                             </ul>
                        </td>                        
                    </tr>
                </tbody>
            </table>
			<div class="pagination pagination-centered">
               
            </div>
        </div>
    </div>
</div>
<div id="details" style="display: none;">
	<div>  
		<ul class="nav nav-tabs">
			<li class="active">
				<a href="#tab-<#= DataType.Name #>Details" data-toggle="tab"><#= DataType.Name #> Details</a>				
			</li>
			<#
			//children 
			foreach (RelatedEntityInfo relation in ChildRelations) {
			#>
			<li><a href="#childtabs-<#= relation.RelatedEntityType.Name #>"  data-toggle="tab"><#= relation.RelationName #></a></li>								
			<#
			}
			#>
		</ul>
		<div  class="tab-content">
			<div id="tab-<#= DataType.Name #>Details"  class="tab-pane active">
    			<div data-bind="with: Entity">
			<#
			//Own properties
			foreach (ModelProperty property in GetModelProperties(DataType, false)) {
    			if (!property.IsPrimaryKey && !property.IsForeignKey && property.Name != "Created" && property.Name != "Updated") {
			#>							
				<label for="<#= property.Name #>">
                	<#= property.Name #>
            	</label>
            	<input type="text" id="<#= property.Name #>" name="<#= property.Name #>"  data-bind="value: <#= property.Name #>" readonly />        		
			<#
    			}
			}
			#>
			<# 
			//parents
			foreach (RelatedEntityInfo relation in ParentRelations) {
			#>
				<label for="<#= relation.RelationName #>">
                	<#= relation.RelationName #>
            	</label>
            	<input type="text" id="<#= relation.RelationName #>" name="<#= relation.RelationName #>"  data-bind="value: <#= relation.RelationName #>().<#= relation.RelatedEntityType.DisplayColumnProperty().Name #>" readonly />
			<#
			}
			#>			
			<#
			//Created/Updated
			foreach (ModelProperty property in GetModelProperties(DataType, false)) {   
				if (property.Name == "Created" || property.Name == "Updated") {
			#>
				<label>
                	<#= property.Name #>
            	</label>
            	<input type="text" id="<#= property.Name #>" name="<#= property.Name #>"  data-bind="value: <#= property.Name #>" readonly />        								
			<#   
				}
			}
			#>
        	<div>
            	<button data-bind="click: ViewLogic.ShowIndex" class="btn btn-primary">
                Back To List</button>        	
    		</div>
			</div>
		</div>
		<#
		//children 
		foreach (RelatedEntityInfo relation in ChildRelations) {			
		#>		
    	<div id="childtabs-<#= relation.RelatedEntityType.Name #>" class="tab-pane"  data-bind="with: Entity">
        	<button class="btn btn-primary" data-bind="click: function(){ ViewLogic.ChangePage('<#= relation.RelatedEntityType.Name #>', 'add', $data.Id,'<#= DataType.Name #>'); }">
        		Add <#= relation.RelatedEntityType.Name #></button>
			<button class="btn btn-primary" data-bind="click: function(){ ViewLogic.ChangePage('<#= relation.RelatedEntityType.Name #>', 'index', $data.Id,'<#= DataType.Name #>'); }">
        		View <#= relation.RelationName #></button>
			<table class="table table-condensed">
        		<thead>
            		<tr>
					<#
					//Own properties
					foreach (ModelProperty property in GetModelProperties(relation.RelatedEntityType, false)) {
						if (!property.IsForeignKey && property.Name != "Created" && property.Name != "Updated") {
    				#>
                	<th>
                		<#= property.Name #>
                	</th>     
					<# }
					} #>
					
					<# 
					/*
					//parents
					foreach (RelatedEntityInfo relation in ParentRelations) {
					#>
					<th>
					<#= relation.RelationName #> 
					</th>
					<#
					}
					#>
					<#
					//children 
					foreach (RelatedEntityInfo relation in ChildRelations) {
					#>
					<th>
						<#= relation.RelationName #>
                    </th>
					<# 
					} 
					*/#>					
					<#
						//Created/Updated
						foreach (ModelProperty property in GetModelProperties(relation.RelatedEntityType, false)) {   
							if (property.Name == "Created" || property.Name == "Updated") {
						#>
						<th>
                            <#= property.Name #>
                        </th>						
						<#   
							}
						}
						#>
                	</tr>
            	</thead>
            	<tbody data-bind="foreach: <#= relation.RelationName #>">
            		<tr>
					<#
					//Own properties
					foreach (ModelProperty property in GetModelProperties(relation.RelatedEntityType, false)) {
						if (!property.IsForeignKey && property.Name != "Created" && property.Name != "Updated") {
    				#>
                		<td data-bind="text: <#= property.Name #>">                                    
                    	</td>     
					<# 
						} 
					}
					#>
					<# /*
					//parents
					foreach (RelatedEntityInfo relation in ParentRelations) {
					#>
					<td>
            			<a href="#" data-bind="text: <#= relation.RelationName #>().<#= relation.RelatedEntityType.DisplayColumnProperty().Name #>, click: function(){ViewLogic.ChangePage('<#= relation.RelationName#>', 'details', $data.<#= relation.RelationName#>().Id,'<#= DataType.Name #>');}"></a>
            		</td>
					<#
					}
					#>	
					<#
					//children 
					foreach (RelatedEntityInfo relation in ChildRelations) {
					#>
					<td data-bind="text: <#= relation.RelationName #>().length + ' <#= relation.RelationName#>'">
            		</td>
					<# 
					} */
					#>
					<#
					//Created/Updated
					foreach (ModelProperty property in GetModelProperties(relation.RelatedEntityType, false)) {   
						if (property.Name == "Created" || property.Name == "Updated") {
					#>
					<td data-bind="text: <#= property.Name #>">
                      </td>                        					
					<#   
						}
					}
					#>
                	</tr>
            	</tbody>
        	</table>
    	</div>
		<#
		}
		#>
		</div>
	</div>
</div>
<div id="dialog-modal-edit" class="modal hide fade" style="display: none;">
    <form data-bind="submit: ViewLogic.UpdateDialogCommit">
	<div class="modal-header">
        <a class="close" data-dismiss="modal">[x]</a>
        <h3>
            Edit <#= DataType.Name #></h3>
    </div>	
    <div class="modal-body" data-bind="with: Entity">
		<#
		//Own properties
		foreach (ModelProperty property in GetModelProperties(DataType, false)) {
    		if (!property.IsPrimaryKey && !property.IsForeignKey && !property.IsReadOnly && property.Name != "Created" && property.Name != "Updated") {
			#>		
			<div class="control-group">
				<label for="<#= property.Name #>">
                	<#= property.Name #>
            	</label>				
				<# 
					switch(property.Type.AsString){
						case "string":
							CodeAttribute datatype = property.Attributes.FirstOrDefault(p => p.Name == "DataType");
							if(datatype == null){
							#>
							<input type="text" id="<#= property.Name #>" name="<#= property.Name #>" placeholder="Enter <#= property.Name #> here" data-bind="value: <#= property.Name #>" />
							<#
							}
							else{
								switch(datatype.Value){
									case "DataType.MultilineText":
										#>
										<textarea class="input-medium" id="<#= property.Name #>" rows="3" name="<#= property.Name #>" data-bind="value: <#= property.Name #>" placeholder="Enter <#= property.Name #> here"></textarea>
										<#
										break;
									default:
										#>
										<input type="text" id="<#= property.Name #>" name="<#= property.Name #>" placeholder="Enter <#= property.Name #> here" data-bind="value: <#= property.Name #>" />
										<#
										break;
								}
							}
							break;
						case "int":							
							CodeAttribute range = property.Attributes.FirstOrDefault(p => p.Name == "Range");
							if(range == null){#>
								<input type="number" id="<#= property.Name #>" name="<#= property.Name #>" placeholder="Enter <#= property.Name #> here" data-bind="value: <#= property.Name #>" />
							<#}
							else{
								var min = range.Value.Split(',')[0].Trim();
								var max = range.Value.Split(',')[1].Trim();								
								#>
								<input type="range" min="<#= min #>" max="<#= max #>" id="<#= property.Name #>" name="<#= property.Name #>" placeholder="Enter <#= property.Name #> here" data-bind="value: <#= property.Name #>"  onchange="$('#<#= property.Name #>LabelEdit').text(this.value)"/>
								<span id="<#= property.Name #>LabelEdit" data-bind="text: <#= property.Name #>"></span>
							<#
							}#>
							<#
							break;
						case "bool":
							#>
							<input type="hidden" id="<#= property.Name #>" name="<#= property.Name #>" data-bind="value: Active" />
							<input type="checkbox" id="<#= property.Name #>CheckBox" name="<#= property.Name #>CheckBox" placeholder="Enter <#= property.Name #> here" data-bind="checked: <#= property.Name #>" />
							<#
							break;
						default:
							#>
							<input type="text" id="<#= property.Name #>" name="<#= property.Name #>" placeholder="Enter <#= property.Name #> here" data-bind="value: <#= property.Name #>" />
							<#
							break;
					}
				#>			            	
        	</div>
			<#
    		}
			if(property.IsPrimaryKey){
			#>
				<input type="hidden" id="<#= property.Name #>" name="<#= property.Name #>" data-bind="value: <#= property.Name #>" />
			<#
			}
			if(property.Name == "Created"){
			#>
			<div class="control-group">
				<label for="<#= property.Name #>">
					<#= property.Name #>
				</label>
				<input type="text" readonly id="<#= property.Name #>" name="<#= property.Name #>" data-bind="value: <#= property.Name #>" />
			</div>
			<#
			}
		}
		#>  
		<# 
		//parents
		foreach (RelatedEntityInfo relation in ParentRelations) {
		#>
		<div class="control-group">
			<label for="<#= relation.RelationProperty.Name #>">
            	<#= relation.RelationName #>
           	</label>
			<select id="<#= relation.RelationProperty.Name #>" name="<#= relation.RelationProperty.Name #>" data-bind="value: <#= relation.RelationProperty.Name #>">
           	</select>
        </div>				
		<#
		}
		#>
		
		<#
		//ManyToMany
		/*Not working right now....
		foreach (RelatedEntityInfo relation in ChildRelations) {					 
		if(IsManyToMany(relation.RelatedEntityType.Name)){
		#>
			<li>
           	<h3>
            <#= relation.RelationName #>
           	</h3>
			<select id="<#= relation.RelationProperty.Name #>" name="<#= relation.RelationProperty.Name #>" data-bind="value: <#= relation.RelationProperty.Name #>">
           	</select>
        </li>
		<#
		}
		}
		*/
		#>
		</div>
        <div class="modal-footer">
        	<button class="btn" data-bind="click: ViewLogic.HideEditDialog">
            	Cancel</button>
        	<button type="submit" class="btn btn-primary">
            	Save</button>
    	</div>
    </form>
</div>
<div id="dialog-modal-delete" class="modal hide fade" style="display: none;">
	<div class="modal-header">
        <a class="close" data-dismiss="modal">[x]</a>
        <h3>
            Delete Factory</h3>
    </div>
    <div class="modal-body" data-bind="with: Entity">
        <h3>
            Do you reallt want to delete this <#= DataType.Name #>?</h3>
    </div>
    <div class="modal-footer">
        <button class="btn" data-bind="click: ViewLogic.HideDeleteDialog">
            Cancel</button>
        <button type="submit" class="btn btn-primary" data-bind="click: ViewLogic.DeleteDialogCommit">
            Confirm Delete</button>
    </div>
</div>
<div id="dialog-modal-add" class="modal hide fade" style="display: none;">
    <form data-bind="submit: ViewLogic.SaveDialogCommit">
	<div class="modal-header">
        <a class="close" data-dismiss="modal">[x]</a>
        <h3>
            Add <#= DataType.Name #></h3>
    </div>
    <div class="modal-body">       
		<#
		//Own properties
		foreach (ModelProperty property in GetModelProperties(DataType, false)) {
    		if (!property.IsPrimaryKey && !property.IsForeignKey && !property.IsReadOnly && property.Name != "Created" && property.Name != "Updated") {
			#>
			<div class="control-group">
            	<label for="<#= property.Name #>">
                <#= property.Name #>
            	</label>
            	<# 
					switch(property.Type.AsString){
						case "string":
							CodeAttribute datatype = property.Attributes.FirstOrDefault(p => p.Name == "DataType");
							if(datatype == null){
							#>
							<input type="text" id="<#= property.Name #>" name="<#= property.Name #>" placeholder="Enter <#= property.Name #> here" />
							<#
							}
							else{
								switch(datatype.Value){
									case "DataType.MultilineText":
										#>
										<textarea class="input-medium" id="<#= property.Name #>" rows="3" name="<#= property.Name #>" placeholder="Enter <#= property.Name #> here"></textarea>
										<#
										break;
									default:
										#>
										<input type="text" id="<#= property.Name #>" name="<#= property.Name #>" placeholder="Enter <#= property.Name #> here" />
										<#
										break;
								}
							}
							break;
						case "int":
							CodeAttribute range = property.Attributes.FirstOrDefault(p => p.Name == "Range");
							if(range == null){#>
								<input type="number" id="<#= property.Name #>" name="<#= property.Name #>" placeholder="Enter <#= property.Name #> here" />
							<#}
							else{
								var min = range.Value.Split(',')[0].Trim();
								var max = range.Value.Split(',')[1].Trim();								
								#>
								<input type="range" min="<#= min #>" max="<#= max #>" value="0" id="<#= property.Name #>" name="<#= property.Name #>" placeholder="Enter <#= property.Name #> here" onchange="$('#<#= property.Name #>LabelAdd').text(this.value)"/>
								<span id="<#= property.Name #>LabelAdd">0</span>
							<#
							}#>
							<#
							break;							
						case "bool":
							#>
							<input type="hidden" id="<#= property.Name #>" name="<#= property.Name #>" />
							<input type="checkbox" id="<#= property.Name #>CheckBox" name="<#= property.Name #>CheckBox" placeholder="Enter <#= property.Name #> here" />
							<#
							break;
						default:
							#>
							<input type="text" id="<#= property.Name #>" name="<#= property.Name #>" placeholder="Enter <#= property.Name #> here" />
							<#
							break;
					}
				#>
        	</div>			
			<#
    		}
		}
		#>
		<#
			//parents
			foreach (RelatedEntityInfo relation in ParentRelations) {
			#>
			<div class="control-group">
            	<label for="<#= relation.RelationProperty.Name #>">
                <#= relation.RelationName #>
            	</label>
				<select id="<#= relation.RelationProperty.Name #>" name="<#= relation.RelationProperty.Name #>" data-bind="value: <#= relation.RelationProperty.Name #>">
            	</select>
        	</div>				
			<#
			}
			#>
		<#
		//ManyToMany
		/*Not working right now....
		foreach (RelatedEntityInfo relation in ChildRelations) {					 
		if(IsManyToMany(relation.RelatedEntityType.Name)){
		#>
			<li>
           	<h3>
            <#= relation.RelationName #>
           	</h3>
			<select id="<#= relation.RelationProperty.Name #>" name="<#= relation.RelationProperty.Name #>" data-bind="value: <#= relation.RelationProperty.Name #>">
            </select>
        </li>
		<#
		}
		}
		*/
		#>        
    </div>
	<div class="modal-footer">
        <button class="btn" data-bind="click: ViewLogic.HideAddDialog">
            Cancel</button>
        <button type="submit" class="btn btn-primary">
            Save</button>        
    </div>
    </form>
</div>
<div id="debug" data-bind="visible: Debug">
    <hr />
    <h2>
        Debug (To turn of debugging set <i>"var debugEnabled = false;"</i> in _Layout.cshtml)</h2>
    <div data-bind="text: ko.toJSON(ViewModel)">
    </div>
</div>
<#+
// Describes the information about a property on the model
class ModelProperty {
    public string Name { get; set; }
    public string ValueExpression { get; set; }
	public EnvDTE.CodeTypeRef Type { get; set; }
    public bool IsPrimaryKey { get; set; }
	public bool IsForeignKey { get; set; }
	public bool IsReadOnly { get; set; }
	public List<EnvDTE.CodeAttribute> Attributes { get; set; }
}

// Change this list to include any non-primitive types you think should be eligible to be edited using a textbox
static Type[] bindableNonPrimitiveTypes = new[] {
    typeof(string),
    typeof(decimal),
    typeof(Guid),
    typeof(DateTime),
	typeof(Nullable<DateTime>),
    typeof(DateTimeOffset),
    typeof(TimeSpan),
};

// Call this to get the list of properties in the model. Change this to modify or add your
// own default formatting for display values.
List<ModelProperty> GetModelProperties(EnvDTE.CodeType typeInfo, bool includeUnbindableProperties) {
    List<ModelProperty> results = GetEligibleProperties(typeInfo, includeUnbindableProperties);
    
    foreach (ModelProperty prop in results) {
        if (prop.Type.UnderlyingTypeIs<double>() || prop.Type.UnderlyingTypeIs<decimal>()) {
            prop.ValueExpression = "String.Format(\"{0:F}\", " + prop.ValueExpression + ")";
        }
        else if (prop.Type.UnderlyingTypeIs<DateTime>()) {
            prop.ValueExpression = "String.Format(\"{0:g}\", " + prop.ValueExpression + ")";
        }
		else if (!IsBindableType(prop.Type)) {
			prop.ValueExpression = GetValueExpression("Model." + prop.Name, (EnvDTE.CodeType)prop.Type.CodeType);
		}
    }

    return results;
}

// Change this list to include the names of properties that should be selected to represent an entity as a single string
static string[] displayPropertyNames = new[] { "Name", "Title", "LastName", "Surname", "Subject", "Count" };

string GetValueExpression(string propertyExpression, EnvDTE.CodeType propertyType) {
	if (propertyType != null) {
		var chosenSubproperty = propertyType.DisplayColumnProperty() ?? propertyType.FindProperty(displayPropertyNames);
		if (chosenSubproperty != null) {
			var toStringSuffix = chosenSubproperty.Type.AsFullName == "System.String" ? "" : ".ToString()";
			return String.Format("({0} == null ? \"None\" : {0}.{1}{2})", propertyExpression, chosenSubproperty.Name, toStringSuffix);
		}
	}
	return "Html.DisplayTextFor(_ => " + propertyExpression + ").ToString()";
}

// Helper
List<ModelProperty> GetEligibleProperties(EnvDTE.CodeType typeInfo, bool includeUnbindableProperties) {
    List<ModelProperty> results = new List<ModelProperty>();
	if (typeInfo != null) {
		foreach (var prop in typeInfo.VisibleMembers().OfType<EnvDTE.CodeProperty>()) {
			if (prop.IsReadable() && !prop.HasIndexParameters() && (includeUnbindableProperties || IsBindableType(prop.Type))) {
				results.Add(new ModelProperty {
					Name = prop.Name,
					ValueExpression = "Model." + prop.Name,
					Type = prop.Type,
					IsPrimaryKey = Model.PrimaryKeyName == prop.Name,
					IsForeignKey = ParentRelations.Any(x => x.RelationProperty == prop),
					IsReadOnly = !prop.IsWriteable(),
					Attributes = prop.Attributes.OfType<EnvDTE.CodeAttribute>().ToList()
					
				});
			}
		}
	}

    return results;
}

IEnumerable<RelatedEntityInfo> ParentRelations {
	get { return ((IEnumerable)Model.RelatedEntities).OfType<RelatedEntityInfo>().Where(x => x.RelationType == RelationType.Parent); }
}

IEnumerable<RelatedEntityInfo> ChildRelations {
	get { return ((IEnumerable)Model.RelatedEntities).OfType<RelatedEntityInfo>().Where(x => x.RelationType == RelationType.Child); }
}

int ChildCount {
	get { return ((IEnumerable)Model.RelatedEntities).OfType<RelatedEntityInfo>().Where(x => x.RelationType == RelationType.Child).Count(); }
}

bool IsInRelation(string propertyName) {
    return ((IEnumerable)Model.RelatedEntities).OfType<RelatedEntityInfo>().Count(x => x.RelationName == propertyName) > 0;
}

bool IsManyToMany(string typeName){
	return Model.ManyToManyEntities.Contains(typeName);
}

// Helper
bool IsBindableType(EnvDTE.CodeTypeRef type) {
    return type.UnderlyingIsPrimitive() || bindableNonPrimitiveTypes.Any(x => type.UnderlyingTypeIs(x));
}
#>