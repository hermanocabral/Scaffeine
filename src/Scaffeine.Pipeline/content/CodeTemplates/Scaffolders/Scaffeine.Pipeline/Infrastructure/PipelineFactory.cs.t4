<#@ Template Language="C#" HostSpecific="True" Inherits="DynamicTransform" #>
<#@ Output Extension="cs" #>
using System.Configuration;
using System.Configuration.Provider;
using System.Web.Configuration;

namespace <#= Model.Namespace #>.Core.Infrastructure.Pipeline
{
    using System;
    using Configuration.Pipeline;

    public static class PipelineFactory
    {
        public static PipelineManager<T> Create<T>(PipelineConfigurationElement pipelineSettings) where T : IPipelineContext
        {
            var processor = ((ICoreProcessor<T>) ObjectFactory.Create(pipelineSettings.ProcessorType));

            var filterChain = new FilterChain<T>();

            FilterActivator<T>.InstantiateFilters(pipelineSettings.Filters, filterChain);

            return new PipelineManager<T>(filterChain)
                       {
                           Processor = processor
                       };
        }
                
        private static class ObjectFactory
        {
            public static object Create(string typeName)
            {
                Type t = Type.GetType(typeName);
                return Activator.CreateInstance(t);
            }
        }
    }
}
