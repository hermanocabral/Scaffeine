<#@ Template Language="C#" HostSpecific="True" Inherits="DynamicTransform" #>
<#@ Output Extension="cs" #>
using System;
using System.Collections.Specialized;
using <#= Model.Namespace #>.Payments.Web;

namespace <#= Model.Namespace #>.Payments.AuthNet
{
    public enum AuthorizeNetResponseCode : int
    {
        Approved = 1,
        Declined = 2,
        Error = 3,
        HeldForReview = 4
    }

    public class AuthorizeNetAVSResponse{
        public static NameValueCollection Values = new NameValueCollection{
            {"A", "Address (Street) matches, ZIP does not"},
            {"B", "Address information not provided for AVS check"},
            {"E",  "AVS error"},
            {"G", "Non-U.S. Card Issuing Bank"},
            {"N", "No Match on Address (Street) or ZIP"},
            {"P", "AVS not applicable for this transaction"},
            {"R", "Retry—System unavailable or timed out"},
            {"S", "Service not supported by issuer"},
            {"U", "Address information is unavailable"},
            {"W", "Nine digit ZIP matches, Address (Street) does not"},
            {"X", "Address (Street) and nine digit ZIP match"},
            {"Y", "Address (Street) and five digit ZIP match"},
            {"Z", "Five digit ZIP matches, Address (Street) does not"}
        };
    }

    public class AuthorizeNetResponse : IResponse
    {
        private readonly string _responseText;

        public AuthorizeNetResponse(string responseText)
        {
            _responseText = responseText;

            string[] values = responseText.Split('|');

            Enum.TryParse(values[0], out ResponseCode);
            ResponseSubcode = values[1];
            int.TryParse(values[2], out ResponseReasonCode);
            ResponseReasonText = values[3];
            ApprovalCode = values[4];
            AVSResponse = AuthorizeNetAVSResponse.Values[values[5]];
            TransactionId = values[6];
            Double.TryParse(values[9], out Amount);
            Md5Hash = values[37].Trim('|');

        }

        public bool IsValid
        {
            get { return ResponseCode == AuthorizeNetResponseCode.Approved; }
        }

        public string ResponseText
        {
            get { return _responseText; }
        }

        public string DisplayText
        {
            get
            {
                return ResponseReasonText;
            }
        }

        public double Amount;
        public string ApprovalCode;
        public string AVSResponse;
        public string CardCode;
        public string CAVVResponseCode;
        public string Description;
        public string InvoiceNumber;
        public string Method;
        public AuthorizeNetResponseCode ResponseCode;
        public int ResponseReasonCode;
        public string ResponseReasonText;
        public string ResponseSubcode;
        public string TransactionId;
        public string Type;
        public string Md5Hash;
    }
}
