<#@ Template Language="C#" HostSpecific="True" Inherits="DynamicTransform" #>
<#@ Output Extension="cs" #>
using System.Collections.Specialized;
using System.Globalization;
using <#= Model.Namespace #>.Payments.Web;

namespace <#= Model.Namespace #>.Payments.AuthNet
{
    public class AuthorizeNetRequest : HttpProcessRequest
    {
        private readonly AuthorizeNetTestMode _testMode;
        public Authentication Authentication;
        public Card Card;
        public Customer Customer;
        public Merchant Merchant;
        public Product Product;
        public Ship Ship;
        public Transaction Transaction;

        public AuthorizeNetRequest(AuthorizeNetTestMode mode)
        {
            Authentication = new Authentication();
            Card = new Card();
            Transaction = new Transaction();
            Customer = new Customer();
            Ship = new Ship();
            Merchant = new Merchant();
            Product = new Product();
            _testMode = mode;
        }

        private bool IsTest()
        {
            return _testMode == AuthorizeNetTestMode.LiveTest || _testMode == AuthorizeNetTestMode.TestAccountTest;
        }

        private string PostUrl
        {
            get
            {
                const string liveUrl = "https://secure.authorize.net/gateway/transact.dll";
                const string testUrl = "https://test.authorize.net/gateway/transact.dll";

                if (_testMode == AuthorizeNetTestMode.TestAccountTest || _testMode == AuthorizeNetTestMode.TestAccountLive)
                {
                    return testUrl;
                }
                return liveUrl;
            }            
        }

        private NameValueCollection GetParams()
        {
            var values = new NameValueCollection{
                {"x_login", Authentication.LoginId},
                {"x_tran_key", Authentication.TransactionKey},
                {"x_version", "3.1"},
                {
                    "x_test_request", IsTest()
                        ? "TRUE"
                        : "FALSE"
                    },
                {"x_delim_data", "TRUE"},
                {"x_relay_response", "FALSE"},
                {"x_delim_char", "|"},     
                {"x_first_name", Customer.FirstName},
                {"x_last_name", Customer.LastName},
                {"x_address", Customer.Address},
                {"x_city", Customer.City},
                {"x_state", Customer.State},
                {"x_zip", Customer.Zip},
                {"x_country", Customer.Country},
                {"x_phone", Customer.Phone},
                {"x_email", Customer.Email},
                {"x_email_customer", Customer.EmailCustomer.ToString(CultureInfo.InvariantCulture).ToUpper()},
                {"x_merchant_email", Merchant.MerchantEmail},
                {"x_amount", Transaction.Amount.ToString()},
                {"x_card_num", Card.CardNumber},
                {"x_card_code", Card.Code},
                {"x_exp_date", Card.ExpDate},
                {"x_method", "CC"}
            };

            switch (Transaction.Type)
            {
                case AuthType.AuthCapture:
                    values.Add("x_type", "AUTH_CAPTURE");
                    break;
                case AuthType.AuthOnly:
                    values.Add("x_type", "AUTH_ONLY");
                    break;
                case AuthType.Void:
                    values.Add("x_type", "VOID");
                    values.Add("x_trans_id", Transaction.TransactionId);
                    break;
                case AuthType.CaptureOnly:
                    values.Add("x_type", "CAPTURE_ONLY");
                    values.Add("x_auth_code", Transaction.PreviousAuthCode);
                    break;
                case AuthType.Credit:
                    values.Add("x_type", "CREDIT");
                    values.Add("x_trans_id", Transaction.TransactionId);
                    break;
            }

            values.Add("x_amount", Transaction.Amount.ToString(CultureInfo.InvariantCulture));
            values.Add("x_customer_ip", Customer.IpAddress);
            values.Add("x_recurring_billing", "NO");
            values.Add("x_ship_first_name", Ship.FirstName);
            values.Add("x_ship_last_name", Ship.LastName);
            values.Add("x_ship_address", Ship.Address);
            values.Add("x_ship_city", Ship.City);
            values.Add("x_ship_zip", Ship.Zip);
            values.Add("x_ship_country", Ship.Country);
            values.Add("x_description", Product.Description);
            values.Add("x_duplidate_window", "0");
            values.Add("x_currency_code", Transaction.CurrencyCode);

            return values;
        }

        public override IResponse GetResponse()
        {           
            Values = GetParams();
            return new AuthorizeNetResponse(ProcessHttpPost(this.PostUrl));
        }
    }
}