<#@ Template Language="C#" HostSpecific="True" Inherits="DynamicTransform" #>
<#@ Output Extension="cs" #>
using System;
using System.Configuration;

namespace <#= Model.Namespace #>.Photos
{
	[ConfigurationCollection(typeof(PhotoResizeSettings))]
	public class PhotoResizeCollection : ConfigurationElementCollection
	{
		internal const string PropertyName = "add";

		protected override bool IsElementName(string elementName)
		{
			return elementName.Equals(PropertyName, StringComparison.InvariantCultureIgnoreCase);
		}

		protected override string ElementName
		{
			get { return PropertyName; }
		}


		public void Add(ProviderSettings provider)
		{
			if(provider != null)
			{
				BaseAdd(provider);
			}
		}

		public void Remove(String name)
		{
			BaseRemove(name);
		}

		public void Clear()
		{
			BaseClear();
		}

		protected override ConfigurationElement CreateNewElement()
		{
			return new PhotoResizeSettings();
		}
		protected override Object GetElementKey(ConfigurationElement element)
		{
			return ((PhotoResizeSettings)element);
		}

		public new PhotoResizeSettings this[string key]
		{
			get
			{
				return (PhotoResizeSettings)BaseGet(key);
			}
		}

		public PhotoResizeSettings this[int index]
		{
			get
			{
				return (PhotoResizeSettings)BaseGet(index);
			}
			set
			{
				if(BaseGet(index) != null)
					BaseRemoveAt(index);

				BaseAdd(index, value);
			}
		} 
	}
}