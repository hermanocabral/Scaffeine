<#@ Template Language="C#" HostSpecific="True" Inherits="DynamicTransform" #>
<#@ Output Extension="cs" #>
// --------------------------------------------------------------------------------------------------------------------
// <copyright file="RecurlyTransaction.cs" company="">
//   
// </copyright>
// <summary>
//   The recurly transaction.
// </summary>
// --------------------------------------------------------------------------------------------------------------------

namespace <#= Model.Namespace #>.Subscriptions.Recurly
{
    using System;
    using System.Net;
    using System.Web;
    using System.Xml;

    /// <summary>
    /// The recurly transaction.
    /// </summary>
    public class RecurlyTransaction
    {
        #region Constants

        /// <summary>
        /// The url postfix.
        /// </summary>
        private const string UrlPostfix = "/transactions";

        /// <summary>
        /// The url prefix.
        /// </summary>
        private const string UrlPrefix = "/transactions/";

        #endregion

        #region Constructors and Destructors

        /// <summary>
        /// Initializes a new instance of the <see cref="RecurlyTransaction"/> class.
        /// </summary>
        internal RecurlyTransaction()
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RecurlyTransaction"/> class.
        /// </summary>
        /// <param name="reader">
        /// The reader.
        /// </param>
        internal RecurlyTransaction(XmlTextReader reader)
        {
            this.ReadXml(reader);
        }

        #endregion

        #region Enums

        /// <summary>
        /// The transaction type.
        /// </summary>
        public enum TransactionType : short
        {
            /// <summary>
            /// The unknown.
            /// </summary>
            Unknown = 0, 

            /// <summary>
            /// The authorization.
            /// </summary>
            Authorization, 

            /// <summary>
            /// The payment.
            /// </summary>
            Payment, 

            /// <summary>
            /// The refund.
            /// </summary>
            Refund
        }

        #endregion

        #region Public Properties

        /// <summary>
        /// Gets the amount in cents.
        /// </summary>
        public int AmountInCents { get; private set; }

        /// <summary>
        /// Gets the date.
        /// </summary>
        public DateTime Date { get; private set; }

        /// <summary>
        /// Gets the id.
        /// </summary>
        public string Id { get; private set; }

        /// <summary>
        /// Gets the message.
        /// </summary>
        public string Message { get; private set; }

        /// <summary>
        /// Gets a value indicating whether refundable.
        /// </summary>
        public bool Refundable { get; private set; }

        /// <summary>
        /// Gets the status.
        /// </summary>
        public string Status { get; private set; }

        /// <summary>
        /// Gets a value indicating whether success.
        /// </summary>
        public bool Success { get; private set; }

        /// <summary>
        /// Gets the type.
        /// </summary>
        public TransactionType Type { get; private set; }

        /// <summary>
        /// Gets a value indicating whether voidable.
        /// </summary>
        public bool Voidable { get; private set; }

        #endregion

        #region Public Methods and Operators

        /// <summary>
        /// The get.
        /// </summary>
        /// <param name="transactionId">
        /// The transaction id.
        /// </param>
        /// <returns>
        /// The <#= Model.Namespace #>.Subscriptions.Recurly.RecurlyTransaction.
        /// </returns>
        public static RecurlyTransaction Get(string transactionId)
        {
            var transaction = new RecurlyTransaction();

            HttpStatusCode statusCode = RecurlyClient.PerformRequest(
                RecurlyClient.HttpRequestMethod.Get, 
                UrlPrefix + HttpUtility.UrlEncode(transactionId), 
                transaction.ReadXml);

            if (statusCode == HttpStatusCode.NotFound)
            {
                return null;
            }

            return transaction;
        }

        /// <summary>
        /// The equals.
        /// </summary>
        /// <param name="obj">
        /// The obj.
        /// </param>
        /// <returns>
        /// The System.Boolean.
        /// </returns>
        public override bool Equals(object obj)
        {
            if (obj is RecurlyTransaction)
            {
                return this.Equals((RecurlyTransaction)obj);
            }
            else
            {
                return false;
            }
        }

        /// <summary>
        /// The equals.
        /// </summary>
        /// <param name="transaction">
        /// The transaction.
        /// </param>
        /// <returns>
        /// The System.Boolean.
        /// </returns>
        public bool Equals(RecurlyTransaction transaction)
        {
            return this.Id == transaction.Id;
        }

        /// <summary>
        /// The get hash code.
        /// </summary>
        /// <returns>
        /// The System.Int32.
        /// </returns>
        public override int GetHashCode()
        {
            return this.Id.GetHashCode();
        }

        /// <summary>
        /// The to string.
        /// </summary>
        /// <returns>
        /// The System.String.
        /// </returns>
        public override string ToString()
        {
            return "Recurly Transaction: " + this.Id;
        }

        #endregion

        #region Methods

        /// <summary>
        /// The transactions url.
        /// </summary>
        /// <param name="accountCode">
        /// The account code.
        /// </param>
        /// <returns>
        /// The System.String.
        /// </returns>
        internal static string TransactionsUrl(string accountCode)
        {
            return RecurlyAccount.UrlPrefix + HttpUtility.UrlEncode(accountCode) + UrlPostfix;
        }

        /// <summary>
        /// The read xml.
        /// </summary>
        /// <param name="reader">
        /// The reader.
        /// </param>
        internal void ReadXml(XmlTextReader reader)
        {
            while (reader.Read())
            {
                // End of account element, get out of here
                if ((reader.Name == "transaction" || reader.Name == "payment" || reader.Name == "refund")
                    && reader.NodeType == XmlNodeType.EndElement)
                {
                    break;
                }

                if (reader.NodeType == XmlNodeType.Element)
                {
                    bool boolVal;
                    switch (reader.Name)
                    {
                        case "id":
                            this.Id = reader.ReadElementContentAsString();
                            break;

                        case "action":
                            string action = reader.ReadElementContentAsString();
                            switch (action)
                            {
                                case "purchase":
                                    this.Type = TransactionType.Payment;
                                    break;
                                case "credit":
                                    this.Type = TransactionType.Refund;
                                    break;
                                case "authorization":
                                    this.Type = TransactionType.Authorization;
                                    break;
                                default:
                                    this.Type = TransactionType.Unknown;
                                    break;
                            }

                            break;

                        case "date":
                            DateTime date;
                            if (DateTime.TryParse(reader.ReadElementContentAsString(), out date))
                            {
                                this.Date = date;
                            }

                            break;

                        case "amount_in_cents":
                            int amount;
                            if (int.TryParse(reader.ReadElementContentAsString(), out amount))
                            {
                                this.AmountInCents = amount;
                            }

                            break;

                        case "message":
                            this.Message = reader.ReadElementContentAsString();
                            break;

                        case "success":
                            if (bool.TryParse(reader.ReadElementContentAsString(), out boolVal))
                            {
                                this.Success = boolVal;
                            }

                            break;

                        case "voidable":
                            if (bool.TryParse(reader.ReadElementContentAsString(), out boolVal))
                            {
                                this.Voidable = boolVal;
                            }

                            break;

                        case "refundable":
                            if (bool.TryParse(reader.ReadElementContentAsString(), out boolVal))
                            {
                                this.Refundable = boolVal;
                            }

                            break;
                    }
                }
            }
        }

        #endregion
    }
}